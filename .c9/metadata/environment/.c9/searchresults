{"changed":true,"filter":false,"title":"searchresults","tooltip":"/.c9/searchresults","value":"Searching for \u0001TOPに戻る\u0001 in\u0001/sasorich3/resources/views/auth\u0001 (Found 0 matches in 0 files)\n\nFound 0 matches in 0 files","undoManager":{"mark":-2,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "],"id":2},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001Remember\u0001 in\u0001/sasorich3\u0001","",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/sasorich3/app/User.php:",""]},{"start":{"row":3,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["\t28:         'password', 'remember_token',","",""]},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["/sasorich3/database/factories/UserFactory.php:",""]},{"start":{"row":6,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["\t21:         'remember_token' => str_random(10),","",""]},{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["/sasorich3/database/migrations/2014_10_12_000000_create_users_table.php:",""]},{"start":{"row":9,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["\t16:             $table->rememberToken();","",""]},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["/sasorich3/resources/views/auth/login.blade.php:",""]},{"start":{"row":12,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["/sasorich3/resources/views/events/auth/login.blade.php:",""]},{"start":{"row":15,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["/sasorich3/resources/views/events/auth/passwords/login.blade.php:",""]},{"start":{"row":18,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":20,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["/sasorich3/storage/framework/views/5281ae4ff10309070b119054eee66be91b540142.php:",""]},{"start":{"row":21,"column":0},"end":{"row":23,"column":0},"action":"insert","lines":["\t45:                                         <input type=\"checkbox\" name=\"remember\" <?php echo e(old('remember') ? 'checked' : ''); ?>> Remember Me","",""]},{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["/sasorich3/vendor/composer/ClassLoader.php:",""]},{"start":{"row":24,"column":0},"end":{"row":26,"column":0},"action":"insert","lines":["\t363:             // Remember that this class does not exist.","",""]},{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["/sasorich3/vendor/filp/whoops/src/Whoops/Exception/Frame.php:",""]},{"start":{"row":27,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["\t194:      *     Get one line for this file, starting at line 10 (zero-indexed, remember!)","",""]},{"start":{"row":29,"column":0},"end":{"row":30,"column":0},"action":"insert","lines":["/sasorich3/vendor/fzaninotto/faker/src/Faker/Provider/en_SG/Address.php:",""]},{"start":{"row":30,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["\t46:     // http://remembersingapore.org/2011/04/04/old-names-of-places/","",""]},{"start":{"row":32,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["/sasorich3/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Text.php:",""]},{"start":{"row":33,"column":0},"end":{"row":54,"column":0},"action":"insert","lines":["\t114: (Dinah was the cat.) 'I hope they'll remember her saucer of milk at","\t175: beasts and other unpleasant things, all because they WOULD not remember","\t203: candle is like after the candle is blown out, for she could not remember","\t219: her eyes; and once she remembered trying to box her own ears for having","\t301: same when I got up this morning? I almost think I can remember feeling a","\t379: it must be a walrus or hippopotamus, but then she remembered how small","\t389: she remembered having seen in her brother's Latin Grammar, 'A mouse--of","\t427: of things--I can't remember half of them--and it belongs to a farmer,","\t1022: 'I'm afraid I am, sir,' said Alice; 'I can't remember things as I","\t1025: 'Can't remember WHAT things?' said the Caterpillar.","\t1200: 'I--I'm a little girl,' said Alice, rather doubtfully, as she remembered","\t1229: remembered that she still held the pieces of mushroom in her hands, and","\t1630: thought over all she could remember about ravens and writing-desks,","\t1963: like the three gardeners, but she could not remember ever having heard","\t2142: but I don't remember where.'","\t2231: tell you just now what the moral of that is, but I shall remember it in","\t2998: 'That I can't remember,' said the Hatter.","\t3000: 'You MUST remember,' remarked the King, 'or I'll have you executed.'","\t3313: sister, as well as she could remember them, all these strange Adventures","\t3362: remembering her own child-life, and the happy summer days.","",""]},{"start":{"row":54,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:",""]},{"start":{"row":55,"column":0},"end":{"row":69,"column":0},"action":"insert","lines":["\t8:      * The column name of the \"remember me\" token.","\t12:     protected $rememberTokenName = 'remember_token';","\t45:      * Get the token value for the \"remember me\" session.","\t49:     public function getRememberToken()","\t51:         if (! empty($this->getRememberTokenName())) {","\t52:             return (string) $this->{$this->getRememberTokenName()};","\t57:      * Set the token value for the \"remember me\" session.","\t62:     public function setRememberToken($value)","\t64:         if (! empty($this->getRememberTokenName())) {","\t65:             $this->{$this->getRememberTokenName()} = $value;","\t70:      * Get the column name for the \"remember me\" token.","\t74:     public function getRememberTokenName()","\t76:         return $this->rememberTokenName;","",""]},{"start":{"row":69,"column":0},"end":{"row":70,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php:",""]},{"start":{"row":70,"column":0},"end":{"row":72,"column":0},"action":"insert","lines":["\t125:         // When using the remember me functionality of the authentication services we","",""]},{"start":{"row":72,"column":0},"end":{"row":73,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:",""]},{"start":{"row":73,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["\t63:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t75:         return $user && $user->getRememberToken() && hash_equals($user->getRememberToken(), $token)","\t80:      * Update the \"remember me\" token for the given user in storage.","\t86:     public function updateRememberToken(UserContract $user, $token)","\t90:                 ->update([$user->getRememberTokenName() => $token]);","",""]},{"start":{"row":79,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:",""]},{"start":{"row":80,"column":0},"end":{"row":87,"column":0},"action":"insert","lines":["\t55:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t71:         $rememberToken = $model->getRememberToken();","\t73:         return $rememberToken && hash_equals($rememberToken, $token) ? $model : null;","\t77:      * Update the \"remember me\" token for the given user in storage.","\t83:     public function updateRememberToken(UserContract $user, $token)","\t85:         $user->setRememberToken($token);","",""]},{"start":{"row":87,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:",""]},{"start":{"row":88,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["\t60:      * Get the \"remember me\" token value.","\t64:     public function getRememberToken()","\t66:         return $this->attributes[$this->getRememberTokenName()];","\t70:      * Set the \"remember me\" token value.","\t75:     public function setRememberToken($value)","\t77:         $this->attributes[$this->getRememberTokenName()] = $value;","\t81:      * Get the column name for the \"remember me\" token.","\t85:     public function getRememberTokenName()","\t87:         return 'remember_token';","",""]},{"start":{"row":98,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Recaller.php:",""]},{"start":{"row":99,"column":0},"end":{"row":102,"column":0},"action":"insert","lines":["\t10:      * The \"recaller\" / \"remember me\" cookie string.","\t38:      * Get the \"remember token\" token from the recaller.","",""]},{"start":{"row":102,"column":0},"end":{"row":103,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php:",""]},{"start":{"row":103,"column":0},"end":{"row":144,"column":0},"action":"insert","lines":["\t43:     protected $viaRemember = false;","\t128:         // one exists. Otherwise we will check for a \"remember me\" cookie in this","\t137:         // pull the user data on that cookie which serves as a remember cookie on","\t155:      * Pull a user from the repository by its \"remember me\" cookie token.","\t167:         // pull the user data on that cookie which serves as a remember cookie on","\t171:         $this->viaRemember = ! is_null($user = $this->provider->retrieveByToken(","\t344:      * @param  bool   $remember","\t347:     public function attempt(array $credentials = [], $remember = false)","\t349:         $this->fireAttemptEvent($credentials, $remember);","\t357:             $this->login($user, $remember);","\t386:      * @param  bool   $remember","\t389:     public function loginUsingId($id, $remember = false)","\t392:             $this->login($user, $remember);","\t404:      * @param  bool  $remember","\t407:     public function login(AuthenticatableContract $user, $remember = false)","\t411:         // If the user should be permanently \"remembered\" by the application we will","\t414:         if ($remember) {","\t415:             $this->ensureRememberTokenIsSet($user);","\t423:         $this->fireLoginEvent($user, $remember);","\t442:      * Create a new \"remember me\" token for the user if one doesn't already exist.","\t447:     protected function ensureRememberTokenIsSet(AuthenticatableContract $user)","\t449:         if (empty($user->getRememberToken())) {","\t450:             $this->cycleRememberToken($user);","\t463:             $user->getAuthIdentifier().'|'.$user->getRememberToken().'|'.$user->getAuthPassword()","\t468:      * Create a \"remember me\" cookie for a given ID.","\t493:             $this->cycleRememberToken($user);","\t524:      * Refresh the \"remember me\" token for the user.","\t529:     protected function cycleRememberToken(AuthenticatableContract $user)","\t531:         $user->setRememberToken($token = Str::random(60));","\t533:         $this->provider->updateRememberToken($user, $token);","\t553:      * @param  bool  $remember","\t556:     protected function fireAttemptEvent(array $credentials, $remember = false)","\t560:                 $credentials, $remember","\t569:      * @param  bool  $remember","\t572:     protected function fireLoginEvent($user, $remember = false)","\t575:             $this->events->dispatch(new Events\\Login($user, $remember));","\t633:         return 'remember_'.$this->name.'_'.sha1(static::class);","\t637:      * Determine if the user was authenticated via \"remember me\" cookie.","\t641:     public function viaRemember()","\t643:         return $this->viaRemember;","",""]},{"start":{"row":144,"column":0},"end":{"row":145,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/login.stub:",""]},{"start":{"row":145,"column":0},"end":{"row":147,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":147,"column":0},"end":{"row":148,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Events/Attempting.php:",""]},{"start":{"row":148,"column":0},"end":{"row":154,"column":0},"action":"insert","lines":["\t15:      * Indicates if the user should be \"remembered\".","\t19:     public $remember;","\t25:      * @param  bool  $remember","\t28:     public function __construct($credentials, $remember)","\t30:         $this->remember = $remember;","",""]},{"start":{"row":154,"column":0},"end":{"row":155,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Events/Login.php:",""]},{"start":{"row":155,"column":0},"end":{"row":161,"column":0},"action":"insert","lines":["\t19:      * Indicates if the user should be \"remembered\".","\t23:     public $remember;","\t29:      * @param  bool  $remember","\t32:     public function __construct($user, $remember)","\t35:         $this->remember = $remember;","",""]},{"start":{"row":161,"column":0},"end":{"row":162,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Cache/Repository.php:",""]},{"start":{"row":162,"column":0},"end":{"row":166,"column":0},"action":"insert","lines":["\t316:     public function remember($key, $minutes, Closure $callback)","\t341:         return $this->rememberForever($key, $callback);","\t351:     public function rememberForever($key, Closure $callback)","",""]},{"start":{"row":166,"column":0},"end":{"row":167,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:",""]},{"start":{"row":167,"column":0},"end":{"row":174,"column":0},"action":"insert","lines":["\t29:      * Get the token value for the \"remember me\" session.","\t33:     public function getRememberToken();","\t36:      * Set the token value for the \"remember me\" session.","\t41:     public function setRememberToken($value);","\t44:      * Get the column name for the \"remember me\" token.","\t48:     public function getRememberTokenName();","",""]},{"start":{"row":174,"column":0},"end":{"row":175,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/StatefulGuard.php:",""]},{"start":{"row":175,"column":0},"end":{"row":184,"column":0},"action":"insert","lines":["\t11:      * @param  bool   $remember","\t14:     public function attempt(array $credentials = [], $remember = false);","\t28:      * @param  bool  $remember","\t31:     public function login(Authenticatable $user, $remember = false);","\t37:      * @param  bool   $remember","\t40:     public function loginUsingId($id, $remember = false);","\t51:      * Determine if the user was authenticated via \"remember me\" cookie.","\t55:     public function viaRemember();","",""]},{"start":{"row":184,"column":0},"end":{"row":185,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/UserProvider.php:",""]},{"start":{"row":185,"column":0},"end":{"row":189,"column":0},"action":"insert","lines":["\t16:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t25:      * Update the \"remember me\" token for the given user in storage.","\t31:     public function updateRememberToken(Authenticatable $user, $token);","",""]},{"start":{"row":189,"column":0},"end":{"row":190,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Repository.php:",""]},{"start":{"row":190,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["\t91:     public function remember($key, $minutes, Closure $callback);","\t109:     public function rememberForever($key, Closure $callback);","",""]},{"start":{"row":193,"column":0},"end":{"row":194,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Database/Schema/Blueprint.php:",""]},{"start":{"row":194,"column":0},"end":{"row":201,"column":0},"action":"insert","lines":["\t340:      * Indicate that the remember token column should be dropped.","\t344:     public function dropRememberToken()","\t346:         $this->dropColumn('remember_token');","\t1084:      * Adds the `remember_token` column to the table.","\t1088:     public function rememberToken()","\t1090:         return $this->string('remember_token', 100)->nullable();","",""]},{"start":{"row":201,"column":0},"end":{"row":202,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php:",""]},{"start":{"row":202,"column":0},"end":{"row":204,"column":0},"action":"insert","lines":["\t77:             $this->credentials($request), $request->filled('remember')","",""]},{"start":{"row":204,"column":0},"end":{"row":205,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php:",""]},{"start":{"row":205,"column":0},"end":{"row":207,"column":0},"action":"insert","lines":["\t107:         $user->setRememberToken(Str::random(60));","",""]},{"start":{"row":207,"column":0},"end":{"row":208,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Session/Store.php:",""]},{"start":{"row":208,"column":0},"end":{"row":210,"column":0},"action":"insert","lines":["\t280:     public function remember($key, Closure $callback)","",""]},{"start":{"row":210,"column":0},"end":{"row":211,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Session/Middleware/AuthenticateSession.php:",""]},{"start":{"row":211,"column":0},"end":{"row":213,"column":0},"action":"insert","lines":["\t42:         if ($this->auth->viaRemember()) {","",""]},{"start":{"row":213,"column":0},"end":{"row":214,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php:",""]},{"start":{"row":214,"column":0},"end":{"row":219,"column":0},"action":"insert","lines":["\t14:  * @method static bool attempt(array $credentials = [], bool $remember = false)","\t16:  * @method static void login(\\Illuminate\\Contracts\\Auth\\Authenticatable $user, bool $remember = false)","\t17:  * @method static \\Illuminate\\Contracts\\Auth\\Authenticatable loginUsingId(mixed $id, bool $remember = false)","\t19:  * @method static bool viaRemember()","",""]},{"start":{"row":219,"column":0},"end":{"row":220,"column":0},"action":"insert","lines":["/sasorich3/vendor/mockery/mockery/docs/reference/phpunit_integration.rst:",""]},{"start":{"row":220,"column":0},"end":{"row":222,"column":0},"action":"insert","lines":["\t66:     (i.e. ``hamcrest.php``).  If upgrading Hamcrest to 1.0.0 remember to check","",""]},{"start":{"row":222,"column":0},"end":{"row":223,"column":0},"action":"insert","lines":["/sasorich3/vendor/mockery/mockery/library/Mockery/Container.php:",""]},{"start":{"row":223,"column":0},"end":{"row":229,"column":0},"action":"insert","lines":["\t235:         $this->rememberMock($mock);","\t434:     public function rememberMock(\\Mockery\\MockInterface $mock)","\t441:              * is already remembered","\t449:      * Retrieve the last remembered mock object, which is the same as saying","\t464:      * Return a specific remembered mock according to the array index it","",""]},{"start":{"row":229,"column":0},"end":{"row":230,"column":0},"action":"insert","lines":["/sasorich3/vendor/mockery/mockery/library/Mockery/Generator/MockConfiguration.php:",""]},{"start":{"row":230,"column":0},"end":{"row":232,"column":0},"action":"insert","lines":["\t289:          * Don't like this condition, can't remember what the default","",""]},{"start":{"row":232,"column":0},"end":{"row":233,"column":0},"action":"insert","lines":["/sasorich3/vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php:",""]},{"start":{"row":233,"column":0},"end":{"row":235,"column":0},"action":"insert","lines":["\t62:         \\Mockery::getContainer()->rememberMock(\\$this);","",""]},{"start":{"row":235,"column":0},"end":{"row":236,"column":0},"action":"insert","lines":["/sasorich3/vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:",""]},{"start":{"row":236,"column":0},"end":{"row":241,"column":0},"action":"insert","lines":["\t21:  * The namespace pass remembers the last standalone namespace line encountered:","\t43:      * If this is a standalone namespace line, remember it for later.","\t45:      * Otherwise, apply remembered namespaces to the code until a new namespace","\t78:      * Remember the namespace and (re)set the namespace on the CodeCleaner as","",""]},{"start":{"row":241,"column":0},"end":{"row":242,"column":0},"action":"insert","lines":["/sasorich3/vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:",""]},{"start":{"row":242,"column":0},"end":{"row":246,"column":0},"action":"insert","lines":["\t23:  * The strict types pass remembers the last strict types declaration:","\t43:      * If this is a standalone strict types declaration, remember it for later.","\t45:      * Otherwise, apply remembered strict types declaration to to the code until","",""]},{"start":{"row":246,"column":0},"end":{"row":247,"column":0},"action":"insert","lines":["/sasorich3/vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:",""]},{"start":{"row":247,"column":0},"end":{"row":251,"column":0},"action":"insert","lines":["\t25:  * The use statement pass remembers the last use statement line encountered:","\t61:      * If it's a use statement, remember the alias for later. Otherwise, apply","\t62:      * remembered aliases to the code.","",""]},{"start":{"row":251,"column":0},"end":{"row":252,"column":0},"action":"insert","lines":["/sasorich3/vendor/symfony/http-kernel/DataCollector/RouterDataCollector.php:",""]},{"start":{"row":252,"column":0},"end":{"row":254,"column":0},"action":"insert","lines":["\t70:      * Remembers the controller associated to each request.","",""]},{"start":{"row":254,"column":0},"end":{"row":255,"column":0},"action":"insert","lines":["Found 188 matches in 40 files ",""]}],[{"start":{"row":255,"column":0},"end":{"row":256,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":0,"column":39},"end":{"row":0,"column":71},"action":"insert","lines":[" (Found 188 matches in 40 files)"]}],[{"start":{"row":256,"column":0},"end":{"row":256,"column":1},"action":"insert","lines":[" "],"id":4},{"start":{"row":256,"column":1},"end":{"row":256,"column":2},"action":"insert","lines":["m"]},{"start":{"row":256,"column":2},"end":{"row":256,"column":3},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":256,"column":3},"action":"remove","lines":["Searching for \u0001Remember\u0001 in\u0001/sasorich3\u0001 (Found 188 matches in 40 files)","","/sasorich3/app/User.php:","\t28:         'password', 'remember_token',","","/sasorich3/database/factories/UserFactory.php:","\t21:         'remember_token' => str_random(10),","","/sasorich3/database/migrations/2014_10_12_000000_create_users_table.php:","\t16:             $table->rememberToken();","","/sasorich3/resources/views/auth/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/resources/views/events/auth/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/resources/views/events/auth/passwords/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/storage/framework/views/5281ae4ff10309070b119054eee66be91b540142.php:","\t45:                                         <input type=\"checkbox\" name=\"remember\" <?php echo e(old('remember') ? 'checked' : ''); ?>> Remember Me","","/sasorich3/vendor/composer/ClassLoader.php:","\t363:             // Remember that this class does not exist.","","/sasorich3/vendor/filp/whoops/src/Whoops/Exception/Frame.php:","\t194:      *     Get one line for this file, starting at line 10 (zero-indexed, remember!)","","/sasorich3/vendor/fzaninotto/faker/src/Faker/Provider/en_SG/Address.php:","\t46:     // http://remembersingapore.org/2011/04/04/old-names-of-places/","","/sasorich3/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Text.php:","\t114: (Dinah was the cat.) 'I hope they'll remember her saucer of milk at","\t175: beasts and other unpleasant things, all because they WOULD not remember","\t203: candle is like after the candle is blown out, for she could not remember","\t219: her eyes; and once she remembered trying to box her own ears for having","\t301: same when I got up this morning? I almost think I can remember feeling a","\t379: it must be a walrus or hippopotamus, but then she remembered how small","\t389: she remembered having seen in her brother's Latin Grammar, 'A mouse--of","\t427: of things--I can't remember half of them--and it belongs to a farmer,","\t1022: 'I'm afraid I am, sir,' said Alice; 'I can't remember things as I","\t1025: 'Can't remember WHAT things?' said the Caterpillar.","\t1200: 'I--I'm a little girl,' said Alice, rather doubtfully, as she remembered","\t1229: remembered that she still held the pieces of mushroom in her hands, and","\t1630: thought over all she could remember about ravens and writing-desks,","\t1963: like the three gardeners, but she could not remember ever having heard","\t2142: but I don't remember where.'","\t2231: tell you just now what the moral of that is, but I shall remember it in","\t2998: 'That I can't remember,' said the Hatter.","\t3000: 'You MUST remember,' remarked the King, 'or I'll have you executed.'","\t3313: sister, as well as she could remember them, all these strange Adventures","\t3362: remembering her own child-life, and the happy summer days.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:","\t8:      * The column name of the \"remember me\" token.","\t12:     protected $rememberTokenName = 'remember_token';","\t45:      * Get the token value for the \"remember me\" session.","\t49:     public function getRememberToken()","\t51:         if (! empty($this->getRememberTokenName())) {","\t52:             return (string) $this->{$this->getRememberTokenName()};","\t57:      * Set the token value for the \"remember me\" session.","\t62:     public function setRememberToken($value)","\t64:         if (! empty($this->getRememberTokenName())) {","\t65:             $this->{$this->getRememberTokenName()} = $value;","\t70:      * Get the column name for the \"remember me\" token.","\t74:     public function getRememberTokenName()","\t76:         return $this->rememberTokenName;","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php:","\t125:         // When using the remember me functionality of the authentication services we","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:","\t63:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t75:         return $user && $user->getRememberToken() && hash_equals($user->getRememberToken(), $token)","\t80:      * Update the \"remember me\" token for the given user in storage.","\t86:     public function updateRememberToken(UserContract $user, $token)","\t90:                 ->update([$user->getRememberTokenName() => $token]);","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:","\t55:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t71:         $rememberToken = $model->getRememberToken();","\t73:         return $rememberToken && hash_equals($rememberToken, $token) ? $model : null;","\t77:      * Update the \"remember me\" token for the given user in storage.","\t83:     public function updateRememberToken(UserContract $user, $token)","\t85:         $user->setRememberToken($token);","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:","\t60:      * Get the \"remember me\" token value.","\t64:     public function getRememberToken()","\t66:         return $this->attributes[$this->getRememberTokenName()];","\t70:      * Set the \"remember me\" token value.","\t75:     public function setRememberToken($value)","\t77:         $this->attributes[$this->getRememberTokenName()] = $value;","\t81:      * Get the column name for the \"remember me\" token.","\t85:     public function getRememberTokenName()","\t87:         return 'remember_token';","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Recaller.php:","\t10:      * The \"recaller\" / \"remember me\" cookie string.","\t38:      * Get the \"remember token\" token from the recaller.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php:","\t43:     protected $viaRemember = false;","\t128:         // one exists. Otherwise we will check for a \"remember me\" cookie in this","\t137:         // pull the user data on that cookie which serves as a remember cookie on","\t155:      * Pull a user from the repository by its \"remember me\" cookie token.","\t167:         // pull the user data on that cookie which serves as a remember cookie on","\t171:         $this->viaRemember = ! is_null($user = $this->provider->retrieveByToken(","\t344:      * @param  bool   $remember","\t347:     public function attempt(array $credentials = [], $remember = false)","\t349:         $this->fireAttemptEvent($credentials, $remember);","\t357:             $this->login($user, $remember);","\t386:      * @param  bool   $remember","\t389:     public function loginUsingId($id, $remember = false)","\t392:             $this->login($user, $remember);","\t404:      * @param  bool  $remember","\t407:     public function login(AuthenticatableContract $user, $remember = false)","\t411:         // If the user should be permanently \"remembered\" by the application we will","\t414:         if ($remember) {","\t415:             $this->ensureRememberTokenIsSet($user);","\t423:         $this->fireLoginEvent($user, $remember);","\t442:      * Create a new \"remember me\" token for the user if one doesn't already exist.","\t447:     protected function ensureRememberTokenIsSet(AuthenticatableContract $user)","\t449:         if (empty($user->getRememberToken())) {","\t450:             $this->cycleRememberToken($user);","\t463:             $user->getAuthIdentifier().'|'.$user->getRememberToken().'|'.$user->getAuthPassword()","\t468:      * Create a \"remember me\" cookie for a given ID.","\t493:             $this->cycleRememberToken($user);","\t524:      * Refresh the \"remember me\" token for the user.","\t529:     protected function cycleRememberToken(AuthenticatableContract $user)","\t531:         $user->setRememberToken($token = Str::random(60));","\t533:         $this->provider->updateRememberToken($user, $token);","\t553:      * @param  bool  $remember","\t556:     protected function fireAttemptEvent(array $credentials, $remember = false)","\t560:                 $credentials, $remember","\t569:      * @param  bool  $remember","\t572:     protected function fireLoginEvent($user, $remember = false)","\t575:             $this->events->dispatch(new Events\\Login($user, $remember));","\t633:         return 'remember_'.$this->name.'_'.sha1(static::class);","\t637:      * Determine if the user was authenticated via \"remember me\" cookie.","\t641:     public function viaRemember()","\t643:         return $this->viaRemember;","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/login.stub:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Events/Attempting.php:","\t15:      * Indicates if the user should be \"remembered\".","\t19:     public $remember;","\t25:      * @param  bool  $remember","\t28:     public function __construct($credentials, $remember)","\t30:         $this->remember = $remember;","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Events/Login.php:","\t19:      * Indicates if the user should be \"remembered\".","\t23:     public $remember;","\t29:      * @param  bool  $remember","\t32:     public function __construct($user, $remember)","\t35:         $this->remember = $remember;","","/sasorich3/vendor/laravel/framework/src/Illuminate/Cache/Repository.php:","\t316:     public function remember($key, $minutes, Closure $callback)","\t341:         return $this->rememberForever($key, $callback);","\t351:     public function rememberForever($key, Closure $callback)","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:","\t29:      * Get the token value for the \"remember me\" session.","\t33:     public function getRememberToken();","\t36:      * Set the token value for the \"remember me\" session.","\t41:     public function setRememberToken($value);","\t44:      * Get the column name for the \"remember me\" token.","\t48:     public function getRememberTokenName();","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/StatefulGuard.php:","\t11:      * @param  bool   $remember","\t14:     public function attempt(array $credentials = [], $remember = false);","\t28:      * @param  bool  $remember","\t31:     public function login(Authenticatable $user, $remember = false);","\t37:      * @param  bool   $remember","\t40:     public function loginUsingId($id, $remember = false);","\t51:      * Determine if the user was authenticated via \"remember me\" cookie.","\t55:     public function viaRemember();","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/UserProvider.php:","\t16:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t25:      * Update the \"remember me\" token for the given user in storage.","\t31:     public function updateRememberToken(Authenticatable $user, $token);","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Repository.php:","\t91:     public function remember($key, $minutes, Closure $callback);","\t109:     public function rememberForever($key, Closure $callback);","","/sasorich3/vendor/laravel/framework/src/Illuminate/Database/Schema/Blueprint.php:","\t340:      * Indicate that the remember token column should be dropped.","\t344:     public function dropRememberToken()","\t346:         $this->dropColumn('remember_token');","\t1084:      * Adds the `remember_token` column to the table.","\t1088:     public function rememberToken()","\t1090:         return $this->string('remember_token', 100)->nullable();","","/sasorich3/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php:","\t77:             $this->credentials($request), $request->filled('remember')","","/sasorich3/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php:","\t107:         $user->setRememberToken(Str::random(60));","","/sasorich3/vendor/laravel/framework/src/Illuminate/Session/Store.php:","\t280:     public function remember($key, Closure $callback)","","/sasorich3/vendor/laravel/framework/src/Illuminate/Session/Middleware/AuthenticateSession.php:","\t42:         if ($this->auth->viaRemember()) {","","/sasorich3/vendor/laravel/framework/src/Illuminate/Support/Facades/Auth.php:","\t14:  * @method static bool attempt(array $credentials = [], bool $remember = false)","\t16:  * @method static void login(\\Illuminate\\Contracts\\Auth\\Authenticatable $user, bool $remember = false)","\t17:  * @method static \\Illuminate\\Contracts\\Auth\\Authenticatable loginUsingId(mixed $id, bool $remember = false)","\t19:  * @method static bool viaRemember()","","/sasorich3/vendor/mockery/mockery/docs/reference/phpunit_integration.rst:","\t66:     (i.e. ``hamcrest.php``).  If upgrading Hamcrest to 1.0.0 remember to check","","/sasorich3/vendor/mockery/mockery/library/Mockery/Container.php:","\t235:         $this->rememberMock($mock);","\t434:     public function rememberMock(\\Mockery\\MockInterface $mock)","\t441:              * is already remembered","\t449:      * Retrieve the last remembered mock object, which is the same as saying","\t464:      * Return a specific remembered mock according to the array index it","","/sasorich3/vendor/mockery/mockery/library/Mockery/Generator/MockConfiguration.php:","\t289:          * Don't like this condition, can't remember what the default","","/sasorich3/vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php:","\t62:         \\Mockery::getContainer()->rememberMock(\\$this);","","/sasorich3/vendor/psy/psysh/src/CodeCleaner/NamespacePass.php:","\t21:  * The namespace pass remembers the last standalone namespace line encountered:","\t43:      * If this is a standalone namespace line, remember it for later.","\t45:      * Otherwise, apply remembered namespaces to the code until a new namespace","\t78:      * Remember the namespace and (re)set the namespace on the CodeCleaner as","","/sasorich3/vendor/psy/psysh/src/CodeCleaner/StrictTypesPass.php:","\t23:  * The strict types pass remembers the last strict types declaration:","\t43:      * If this is a standalone strict types declaration, remember it for later.","\t45:      * Otherwise, apply remembered strict types declaration to to the code until","","/sasorich3/vendor/psy/psysh/src/CodeCleaner/UseStatementPass.php:","\t25:  * The use statement pass remembers the last use statement line encountered:","\t61:      * If it's a use statement, remember the alias for later. Otherwise, apply","\t62:      * remembered aliases to the code.","","/sasorich3/vendor/symfony/http-kernel/DataCollector/RouterDataCollector.php:","\t70:      * Remembers the controller associated to each request.","","Found 188 matches in 40 files ",""," me"],"id":5},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001Remember me\u0001 in\u0001/sasorich3\u0001","",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/sasorich3/resources/views/auth/login.blade.php:",""]},{"start":{"row":3,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["/sasorich3/resources/views/events/auth/login.blade.php:",""]},{"start":{"row":6,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["/sasorich3/resources/views/events/auth/passwords/login.blade.php:",""]},{"start":{"row":9,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["/sasorich3/storage/framework/views/5281ae4ff10309070b119054eee66be91b540142.php:",""]},{"start":{"row":12,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["\t45:                                         <input type=\"checkbox\" name=\"remember\" <?php echo e(old('remember') ? 'checked' : ''); ?>> Remember Me","",""]},{"start":{"row":14,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:",""]},{"start":{"row":15,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["\t8:      * The column name of the \"remember me\" token.","\t45:      * Get the token value for the \"remember me\" session.","\t57:      * Set the token value for the \"remember me\" session.","\t70:      * Get the column name for the \"remember me\" token.","",""]},{"start":{"row":20,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php:",""]},{"start":{"row":21,"column":0},"end":{"row":23,"column":0},"action":"insert","lines":["\t125:         // When using the remember me functionality of the authentication services we","",""]},{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:",""]},{"start":{"row":24,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["\t63:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t80:      * Update the \"remember me\" token for the given user in storage.","",""]},{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:",""]},{"start":{"row":28,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["\t55:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t77:      * Update the \"remember me\" token for the given user in storage.","",""]},{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:",""]},{"start":{"row":32,"column":0},"end":{"row":36,"column":0},"action":"insert","lines":["\t60:      * Get the \"remember me\" token value.","\t70:      * Set the \"remember me\" token value.","\t81:      * Get the column name for the \"remember me\" token.","",""]},{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Recaller.php:",""]},{"start":{"row":37,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["\t10:      * The \"recaller\" / \"remember me\" cookie string.","",""]},{"start":{"row":39,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php:",""]},{"start":{"row":40,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["\t128:         // one exists. Otherwise we will check for a \"remember me\" cookie in this","\t155:      * Pull a user from the repository by its \"remember me\" cookie token.","\t442:      * Create a new \"remember me\" token for the user if one doesn't already exist.","\t468:      * Create a \"remember me\" cookie for a given ID.","\t524:      * Refresh the \"remember me\" token for the user.","\t637:      * Determine if the user was authenticated via \"remember me\" cookie.","",""]},{"start":{"row":47,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/login.stub:",""]},{"start":{"row":48,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","",""]},{"start":{"row":50,"column":0},"end":{"row":51,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:",""]},{"start":{"row":51,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["\t29:      * Get the token value for the \"remember me\" session.","\t36:      * Set the token value for the \"remember me\" session.","\t44:      * Get the column name for the \"remember me\" token.","",""]},{"start":{"row":55,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/StatefulGuard.php:",""]},{"start":{"row":56,"column":0},"end":{"row":58,"column":0},"action":"insert","lines":["\t51:      * Determine if the user was authenticated via \"remember me\" cookie.","",""]},{"start":{"row":58,"column":0},"end":{"row":59,"column":0},"action":"insert","lines":["/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/UserProvider.php:",""]},{"start":{"row":59,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["\t16:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t25:      * Update the \"remember me\" token for the given user in storage.","",""]},{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["Found 30 matches in 15 files ",""]},{"start":{"row":63,"column":0},"end":{"row":64,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":42},"end":{"row":0,"column":73},"action":"insert","lines":[" (Found 30 matches in 15 files)"]}],[{"start":{"row":0,"column":0},"end":{"row":64,"column":0},"action":"remove","lines":["Searching for \u0001Remember me\u0001 in\u0001/sasorich3\u0001 (Found 30 matches in 15 files)","","/sasorich3/resources/views/auth/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/resources/views/events/auth/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/resources/views/events/auth/passwords/login.blade.php:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/storage/framework/views/5281ae4ff10309070b119054eee66be91b540142.php:","\t45:                                         <input type=\"checkbox\" name=\"remember\" <?php echo e(old('remember') ? 'checked' : ''); ?>> Remember Me","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:","\t8:      * The column name of the \"remember me\" token.","\t45:      * Get the token value for the \"remember me\" session.","\t57:      * Set the token value for the \"remember me\" session.","\t70:      * Get the column name for the \"remember me\" token.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php:","\t125:         // When using the remember me functionality of the authentication services we","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:","\t63:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t80:      * Update the \"remember me\" token for the given user in storage.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:","\t55:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t77:      * Update the \"remember me\" token for the given user in storage.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:","\t60:      * Get the \"remember me\" token value.","\t70:      * Set the \"remember me\" token value.","\t81:      * Get the column name for the \"remember me\" token.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Recaller.php:","\t10:      * The \"recaller\" / \"remember me\" cookie string.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php:","\t128:         // one exists. Otherwise we will check for a \"remember me\" cookie in this","\t155:      * Pull a user from the repository by its \"remember me\" cookie token.","\t442:      * Create a new \"remember me\" token for the user if one doesn't already exist.","\t468:      * Create a \"remember me\" cookie for a given ID.","\t524:      * Refresh the \"remember me\" token for the user.","\t637:      * Determine if the user was authenticated via \"remember me\" cookie.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Auth/Console/stubs/make/views/auth/login.stub:","\t46:                                         <input type=\"checkbox\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}> Remember Me","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:","\t29:      * Get the token value for the \"remember me\" session.","\t36:      * Set the token value for the \"remember me\" session.","\t44:      * Get the column name for the \"remember me\" token.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/StatefulGuard.php:","\t51:      * Determine if the user was authenticated via \"remember me\" cookie.","","/sasorich3/vendor/laravel/framework/src/Illuminate/Contracts/Auth/UserProvider.php:","\t16:      * Retrieve a user by their unique identifier and \"remember me\" token.","\t25:      * Update the \"remember me\" token for the given user in storage.","","Found 30 matches in 15 files ","",""],"id":6},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001TOPに戻る\u0001 in\u0001/sasorich3/resources/views/auth\u0001","",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["Found 0 matches in 0 files ",""]},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":58},"end":{"row":0,"column":87},"action":"insert","lines":[" (Found 0 matches in 0 files)"]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["",""],"id":7},{"start":{"row":2,"column":27},"end":{"row":3,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2,"column":26},"end":{"row":2,"column":27},"action":"remove","lines":[" "]}]]},"ace":{"folds":[],"customSyntax":"c9search","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":26},"end":{"row":2,"column":26},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1529541623370}